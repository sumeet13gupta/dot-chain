##Creating Blocks :
Timestamps in miliseconds
lastHash - the hash of the data block efore it
hash -  based on its own data
the data to store

______________________________________________________________________________________________________________________________________________

##The Genesis block:
it serves the purpose of creating the origfin for the block-chain
why is it useful? : If someone adds a new block to the chain, it contains the hash information of its previous block i.e. the Genesis block.

______________________________________________________________________________________________________________________________________________

##Mine blocks:
based on the old blocks we can create new blocks

______________________________________________________________________________________________________________________________________________

Block hashes and SHA-256 :
The hash is generated from the timestamp, lastHash, ad stored Data.   (256bits = 32 bytes == 32 characters)
One-way hash - from direction of data to hashes
useful for block validation.

______________________________________________________________________________________________________________________________________________

types of validation
##Multiple Chain Validation 
##Hash Validation

______________________________________________________________________________________________________________________________________________

## Creating a blockchain API to access the blocks in our blockchain:
    we will be using express module for building the API around our blockchain

______________________________________________________________________________________________________________________________________________

## Creating a Peer-to-Peer server: 
1. The first appp connects the peer-to-peer server
2. A later server,connecting to the original

______________________________________________________________________________________________________________________________________________

## Creating a web socket server:
webSocket helps create the peer to peer circuits using a socket connection

______________________________________________________________________________________________________________________________________________

After sending the requiest for new block creation using postman we got few block details in our first instance of node .

[nodemon] starting `node ./app`
peers to be connected :
Listening for peer-to-peer connections on : 5001
Listening on port 3001
1
Socket connected
data [
  {
    timestamp: 'Genesis time',
    lastHash: '______',
    hash: 'irhsd_hasbu',
    data: []
  }
]
New block Added Block -
          Timestamp : 1623177106303
          LastHash  : irhsd_hasb
          Hash      : 8a3d79e975991948df
          Data      : undefined
New block Added Block -
          Timestamp : 1623177143911
          LastHash  : 8a3d79e975
          Hash      : e4753f1e40192167a9
          Data      : foooo
New block Added Block -
          Timestamp : 1623177169986
          LastHash  : e4753f1e40
          Hash      : 45fcd6d3e2b55ae50f
          Data      : foooo
New block Added Block -
          Timestamp : 1623177171091
          LastHash  : 45fcd6d3e2
          Hash      : ea99679438cb8a371a
          Data      : foooo
2
Socket connected
data [
  {
    timestamp: 'Genesis time',
    lastHash: '______',
    hash: 'irhsd_hasbu',
    data: []
  }
]

## Synchronize the blockchain across all the peers


This Pc@SG MINGW64 ~/Desktop/dot-chain (main)
$ HTTP_port=3002 P2P_port=5002 PEERS=ws://localhost:5001 npm run dev

> dot-chain@1.0.0 dev C:\Users\This Pc\Desktop\dot-chain
> nodemon ./app

[nodemon] 2.0.7
[nodemon] to restart at any time, enter `rs`
[nodemon] watching path(s): *.*
[nodemon] watching extensions: js,mjs,json
[nodemon] starting `node ./app`
peers to be connected : ws://localhost:5001
Listening for peer-to-peer connections on : 5002
Listening on port 3002
1
Socket connected
Received chain is not longer than the current chain length
Replaced Blockchain with the new chain
Replaced Blockchain with the new chain
Replaced Blockchain with the new chain
New block Added Block -
          Timestamp : 1623180779642
          LastHash  : 45f437b46e
          Hash      : 52e7ce88ef45d58a7e
          Data      : foofoo
New block Added Block -
          Timestamp : 1623180802157
          LastHash  : 52e7ce88ef
          Hash      : 4fcdeb0d86c75f730a
          Data      : yuphee
New block Added Block -
          Timestamp : 1623182692783
          LastHash  : 4fcdeb0d86
          Hash      : 592285194cddf37f01
          Data      : new data


While on the first peer :


This Pc@SG MINGW64 ~/Desktop/dot-chain (main)
$ npm run dev

> dot-chain@1.0.0 dev C:\Users\This Pc\Desktop\dot-chain
> nodemon ./app

[nodemon] 2.0.7
[nodemon] to restart at any time, enter `rs`
[nodemon] watching path(s): *.*
[nodemon] watching extensions: js,mjs,json
[nodemon] starting `node ./app`
peers to be connected :
Listening for peer-to-peer connections on : 5001
Listening on port 3001
1
Socket connected
Received chain is not longer than the current chain length
New block Added Block -
          Timestamp : 1623180704215
          LastHash  : irhsd_hasb
          Hash      : 40254a595a173879ce
          Data      : foooo
New block Added Block -
          Timestamp : 1623180708461
          LastHash  : 40254a595a
          Hash      : 51f228509ae19c092a
          Data      : foooo
New block Added Block -
          Timestamp : 1623180709638
          LastHash  : 51f228509a
          Hash      : 45f437b46ef508751a
          Data      : foooo
Replaced Blockchain with the new chain
Replaced Blockchain with the new chain
Replaced Blockchain with the new chain

______________________________________________________________________________________________________________________________________________]

## Proof of work

1. A system that requires miners to do computational work to add block 
2. Any peer can replace the blockchain
3. the proof of work makes it expensive to generate corrupt chains
4. Manageable to submit one block, unproductive to generate an entire chain
5. HashCash is a proof of work system  to prevent email spamming 
                        Difficulty = 6    (leading zeroes)
                        Hash = 000000hagf673728jahdsis
6. Generate hashes until one with matching leading zeroes is found
7. A 'Nonce' value adjusts in order to generate new hashes (nonce used only ones )

    51% Attack : A dishonest miner has more than at least 51% of the network's computational power they have the power to replace 
    the current blockchain with the one in their favour
    => A 51% Attack for bit coin would be more than $6 billion(start of 2018

______________________________________________________________________________________________________________________________________________

Now the nonce value is also considered for generating hash. now we can set the difficulty for the computation as per the difficulty in config file
It takes an amount of time to find the valid hash for the block.

    console.log
      Block -
                Timestamp : 1624709009930
                LastHash  : irhsd_hasb
                Hash      : 00009066a852e34d21
                nonce     : 84043
                Data      : bar

      at Object.<anonymous> (blockchain/block.test.js:23:17)


Test Suites: 2 passed, 2 total
Tests:       10 passed, 10 total
Snapshots:   0 total
Time:        15.854 s, estimated 16 s
Ran all test suites.

______________________________________________________________________________________________________________________________________________

Dynamic Block Difficulty :
We keep track of the mine rate , if the next block is added before the mine rate we will increase the difficulty by 1 while if it is mined too slowly , we will decrease the difficulty by 1 .

